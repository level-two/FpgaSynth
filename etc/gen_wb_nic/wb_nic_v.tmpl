// -----------------------------------------------------------------------------
// Copyright (c) 2017 Yauheni Lychkouski. All Rights Reserved
//
// Unauthorized copying of this file, via any medium is strictly prohibited
// Proprietary and confidential
// -----------------------------------------------------------------------------
// File: ${module_name}.v
// Description: Wishbone NIC. Generated by the gen_wb_nic.py script
// -----------------------------------------------------------------------------


module $module_name
(
    // Masters
#for $m in $masters
    input      [ADDR_W-1:0] ${m.name}_wbm_address,
    input      [DATA_W-1:0] ${m.name}_wbm_writedata,
    output     [DATA_W-1:0] ${m.name}_wbm_readdata,
    input                   ${m.name}_wbm_strobe,
    input                   ${m.name}_wbm_cycle,
    input                   ${m.name}_wbm_write,
    output                  ${m.name}_wbm_ack,

#end for

    // Slaves
#for $s in $slaves
    output     [ADDR_W-1:0] ${s.name}_wbs_address,
    output     [DATA_W-1:0] ${s.name}_wbs_writedata,
    input      [DATA_W-1:0] ${s.name}_wbs_readdata,
    output                  ${s.name}_wbs_strobe,
    output                  ${s.name}_wbs_cycle,
    output                  ${s.name}_wbs_write,
    input                   ${s.name}_wbs_ack,

#end for
    input                   reset,
    input                   clk
);

    localparam ADDR_W      = ${addr_w};
    localparam DATA_W      = ${data_w};
    localparam MASTERS_NUM = ${masters_n};

    wire [MASTERS_NUM-1:0] req;
    wire [MASTERS_NUM-1:0] gnt;

    assign req = {#slurp
#set $sep = ''
#for $m in $masters
$sep${m.name}_wbm_cycle#slurp
#set $sep = ', '
#end for
};
 
    arb_rr #(MASTERS_NUM) arb_rr_inst
    (
        .reset(reset),
        .clk(clk),
        .req(req),
        .gnt(gnt)
    );

    reg  [ADDR_W-1:0] wbs_address;
    reg  [DATA_W-1:0] wbs_writedata;
    wire [DATA_W-1:0] wbs_readdata;
    wire              wbs_ack;
    reg               wbs_strobe;
    reg               wbs_cycle;
    reg               wbs_write;

    always @(*) begin
        case (gnt)
#set $gnt_val = '1'
#for $m in $masters
            'b${gnt_val}: begin
                wbs_address   = ${m.name}_wbm_address;
                wbs_writedata = ${m.name}_wbm_writedata;
                wbs_strobe    = ${m.name}_wbm_strobe;
                wbs_cycle     = ${m.name}_wbm_cycle;
                wbs_write     = ${m.name}_wbm_write;
            end
#set $gnt_val = $gnt_val + '0'
#end for
            default: begin
                wbs_address   = 0;
                wbs_writedata = 0;
                wbs_strobe    = 0;
                wbs_cycle     = 0;
                wbs_write     = 0;
            end
        endcase
    end

#set $gnt_idx = 0
#for $m in $masters
    assign ${m.name}_wbm_ack      = gnt[${gnt_idx}] ? wbs_ack      : 0;
    assign ${m.name}_wbm_readdata = gnt[${gnt_idx}] ? wbs_readdata : 0;
#set $gnt_idx = $gnt_idx + 1
#end for


#for $s in $slaves
    wire   ${s.name}_wbs_selected  = (wbs_address[ADDR_W-1:ADDR_W-${base_addr_w}] == ${base_addr_w}'${s.base});
    assign ${s.name}_wbs_address   = wbs_address;
    assign ${s.name}_wbs_writedata = wbs_writedata;
    assign ${s.name}_wbs_write     = wbs_write;
    assign ${s.name}_wbs_cycle     = ${s.name}_selected ? wbs_cycle  : 0;
    assign ${s.name}_wbs_strobe    = ${s.name}_selected ? wbs_strobe : 0;

#end for

    assign wbs_ack =
#for $s in $slaves
        ${s.name}_wbs_selected ? ${s.name}_wbs_ack :
#end for
        0;

    assign wbs_readdata =
#for $s in $slaves
        ${s.name}_wbs_selected ? ${s.name}_wbs_readdata :
#end for
        0;

endmodule
