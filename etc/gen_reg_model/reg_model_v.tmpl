// -----------------------------------------------------------------------------
// Copyright (c) 2017 Yauheni Lychkouski. All Rights Reserved
//
// Unauthorized copying of this file, via any medium is strictly prohibited
// Proprietary and confidential
// -----------------------------------------------------------------------------
// File: ${module_name}.v
// Description: Configuration registers for ${module_name}
//              Generated by the gen_reg_model.py
// -----------------------------------------------------------------------------

module $module_name
    // Wishbone signals
    input  [ADDR_WIDTH-1:0] wbs_address,
    input  [DATA_WIDTH-1:0] wbs_writedata,
    output [DATA_WIDTH-1:0] wbs_readdata,
    input  wbs_strobe,
    input  wbs_cycle,
    input  wbs_write,
    output wbs_ack,

#for $r in $regs
#for $f in $r.reg_fields
#set $f_msb = $f.field_bits[0] - $f.field_bits[1]
#if $r.reg_type == 'rw'
    output [$f_msb:0] ${r.reg_name}_${f.field_name},
#else if $r.reg_type == 'ro'
    input  [$f_msb:0] ${r.reg_name}_${f.field_name},
##else if $r.reg_type == 'const'
## empty
#end if
#end for
#end for

    input reset,
    input clk
);

    localparam ADDR_WIDTH = ${addr_w};
    localparam DATA_WIDTH = ${data_w};

    reg  read_ack;
    reg  write_ack;
    wire trans     = wbs_strobe & wbs_cycle;
    wire write     = trans & wbs_write;
    wire read      = trans & ~wbs_write;
    assign wbs_ack = (read_ack | write_ack) & trans;


    always @(posedge clk or posedge reset) begin
        if (reset) begin 
            write_ack <= 1'b0;
            read_ack  <= 1'b0;
        end else begin
            write_ack <= write;
            read_ack  <= read;
        end
    end


    wire [ADDR_WIDTH-1:0] addr       = wbs_address;
    wire [DATA_WIDTH-1:0] write_data = wbs_writedata;
    reg  [DATA_WIDTH-1:0] read_data;
    assign wbs_readdata = read_data;


#for $r in $regs
#if $r.reg_type == 'rw'
    reg  [DATA_WIDTH-1:0] ${r.reg_name}_rw_reg;
#else if $r.reg_type == 'ro'
    wire [DATA_WIDTH-1:0] ${r.reg_name}_ro_reg;
#else if $r.reg_type == 'const'
    reg  [DATA_WIDTH-1:0] ${r.reg_name}_const_reg;
#end if
#end for


    always @(*) begin
        case (addr[${reg_addr_w-1}:0])
#for $r in $regs
#if $r.reg_type == 'rw'
            ${reg_addr_w}'${r.reg_addr}:   read_data <= ${r.reg_name}_rw_reg;
#else if $r.reg_type == 'ro'
            ${reg_addr_w}'${r.reg_addr}:   read_data <= ${r.reg_name}_ro_reg;
#else if $r.reg_type == 'const'
            ${reg_addr_w}'${r.reg_addr}:   read_data <= ${r.reg_name}_const_reg;
#end if
#end for
            default: read_data <= {DATA_WIDTH{1'b0}};
        endcase
    end


    always @(posedge clk or posedge reset) begin
        if (reset) begin 
            // default values
#for $r in $regs
#for $f in $r.reg_fields
#set $f_size = $f.field_bits[0] - $f.field_bits[1]
#if $r.reg_type == 'rw'
            ${r.reg_name}_rw_reg[${f.field_bits[0]}:${f.field_bits[1]}]    <= ${f_size}'${f.reset_value};
##else if $r.reg_type == 'ro'
## empty
#else if $r.reg_type == 'const'
            ${r.reg_name}_const_reg[${f.field_bits[0]}:${f.field_bits[1]}]    <= ${f_size}'${f.reset_value};
#end if
#end for
#end for
        end 
        else if (write) begin
            case (addr[${reg_addr_w-1}:0])
#for $r in $regs
#if $r.reg_type == 'rw'
                ${reg_addr_w}'${r.reg_addr}:   ${r.reg_name}_rw_reg <= write_data;
#else if $r.reg_type == 'ro'
                ${reg_addr_w}'${r.reg_addr}:   begin end;
#else if $r.reg_type == 'const'
                ${reg_addr_w}'${r.reg_addr}:   begin end;
#end if
#end for
            endcase
        end
    end


#for $r in $regs
#for $f in $r.reg_fields
#set $f_size = $f.field_bits[0] - $f.field_bits[1]
#if $r.reg_type == 'rw'
    assign ${r.reg_name}_${f.field_name} = ${r.reg_name}_rw_reg[${f.field_bits[0]}:${f.field_bits[1]}]; 
#else if $r.reg_type == 'ro'
    assign ${r.reg_name}_ro_reg[${f.field_bits[0]}:${f.field_bits[1]}] = ${r.reg_name}_${f.field_name};
##else if $r.reg_type == 'const'
## empty
#end if
#end for
#end for

endmodule
